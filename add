#!/usr/bin/env node

const fs = require('fs')
const inquirer = require('inquirer')
const axios = require('axios')
const cheerio = require('cheerio')
const links = require('./links')
const { execute } = require('./scripts/helpers')

const loadPage = async(url) => {
  const { data: html } = await axios.get(url)
  return cheerio.load(html)
}

console.log('Add a new link')

const questions = [
  {
    type: 'input',
    name: 'url',
    message: 'URL',
    validate(value) {
      const alreadyAdded = links.find(link =>
        link.url === value || (
          link.url.match(/\/$/) && link.url.slice(0, -1) === value
        )
      )
      return !value
        ? 'Url is required'
        : !alreadyAdded || 'This link already exists.'
    },
    filter: String
  },
  {
    type: 'input',
    name: 'title',
    message: 'Title',
    async default({ url }) {
      try {
        const $ = await loadPage(url)
        return $('title').text()
      } catch {
        console.log("Couldn't scrape title, enter manually")
        return undefined
      }
    },
    validate(value) {
      return !!value || 'Title is required'
    },
    filter: String
  },
  {
    type: 'input',
    name: 'tags',
    message: 'Tags (comma separated)',
    filter: String
  },
  {
    type: 'confirm',
    name: 'publishNow',
    message: 'Publish links now?',
    default: true
  }
]

inquirer.prompt(questions).then(answers => {
  const tags = answers.tags
    .split(',')
    .map(tag => tag.trim())
    .filter(tag => tag.length)

  const link = {
    url: answers.url,
    title: answers.title,
    tags
  }

  const content = JSON.stringify(links.concat(link), null, 2)
  fs.writeFile('./links.json', content, err => {
    if (err) {
      throw err
    }
    console.log('Added link:', JSON.stringify(link, null, 2))
    if (answers.publishNow) {
      const commitMessage = 'Add new links'
      execute({
        cmd: `\\
          git pull && \\
          git add links.json && \\
          git commit -m "${commitMessage}" && \\
          git push\\
        `,
        outStream: process.stdout,
        errStream: process.stderr
      })
    }
  })
})
