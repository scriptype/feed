#!/usr/bin/env node

require('dotenv').config()
const fs = require('fs')
const inquirer = require('inquirer')
const axios = require('axios')
const cheerio = require('cheerio')
const { TwitterApi } = require('twitter-api-v2')
const links = require('./links')
const { execute } = require('./scripts/helpers')

const loadPage = async(url) => {
  const { data: html } = await axios.get(url)
  return cheerio.load(html)
}

const isTweet = url => {
  return /twitter.com\/.+\/status\/\d+$/.test(url)
}

const getTweetStatusID = tweetUrl => {
  return tweetUrl.match(/twitter.com\/.+\/status\/(\d+)$/)[1]
}

const getTweet = tweetUrl => new Promise((resolve, reject) => {
  const twitterClient = new TwitterApi({
    appKey: process.env.TWITTER_CONSUMER_KEY,
    appSecret: process.env.TWITTER_CONSUMER_SECRET,
    accessToken: process.env.TWITTER_ACCESS_TOKEN_KEY,
    accessSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET
  })

  const tweetStatusID = getTweetStatusID(tweetUrl)

  twitterClient.v2.singleTweet(tweetStatusID, {
    'tweet.fields': ['entities']
  }).then(tweet => {
    let linkUrl = tweetUrl
    if (tweet.entities.urls && tweet.entities.urls.length) {
      linkUrl = tweet.entities.urls[0].expanded_url
    }
    resolve({
      tweetUrl,
      id: tweetStatusID,
      linkUrl
    })
  }).catch(reject)
})

let tweet = null

console.log('Add a new link')

const questions = [
  {
    type: 'input',
    name: 'url',
    message: 'URL',
    async validate(value) {
      if (!value) {
        return 'Url is required'
      }

      let url = value

      if (isTweet(value)) {
        try {
          tweet = await getTweet(value)
          url = tweet.linkUrl
        } catch (e) {
          console.error(e)
        }
      }

      const alreadyAdded = links.find(link =>
        link.url === url || (
          link.url.match(/\/$/) && link.url.slice(0, -1) === url
        )
      )
      if (alreadyAdded) {
        return 'This link already exists.'
      }

      return true
    },
    filter: String
  },
  {
    type: 'input',
    name: 'title',
    message: 'Title',
    async default({ url }) {
      try {
        const $ = await loadPage(tweet ? tweet.linkUrl : url)
        return $('title').text()
      } catch {
        console.log("Couldn't scrape title, enter manually")
        return undefined
      }
    },
    validate(value) {
      return !!value || 'Title is required'
    },
    filter: String
  },
  {
    type: 'input',
    name: 'RTQuote',
    message: 'Retweet quote',
    filter: String,
    when: () => tweet
  },
  {
    type: 'input',
    name: 'tags',
    message: 'Tags (comma separated)',
    filter: String
  },
  {
    type: 'confirm',
    name: 'isConfirmed',
    message: 'Sure?',
    default: true
  }
]

inquirer.prompt(questions).then(answers => {
  const tags = answers.tags
    .split(',')
    .map(tag => tag.trim())
    .filter(tag => tag.length)

  const twitterOptions = tweet ? {
    tweet: {
      ...tweet,
      quote: answers.RTQuote
    }
  } : {}

  const link = {
    url: tweet ? tweet.linkUrl : answers.url,
    title: answers.title,
    tags,
    ...twitterOptions
  }

  if (!answers.isConfirmed) {
    return console.log('OK, link is not added.')
  }

  const content = JSON.stringify(links.concat(link), null, 2)
  fs.writeFile('./links.json', content, err => {
    if (err) {
      throw err
    }
    console.log('Added link:', JSON.stringify(link, null, 2))
    const commitMessage = `Add: ${link.url}`
    execute({
      cmd: `\\
        git pull && \\
        node scripts/generate-data | node scripts/publish && \\
        git add links.json docs && \\
        git commit -m "${commitMessage}" && \\
        git push\\
      `,
      outStream: process.stdout,
      errStream: process.stderr
    }).catch(e => {
      console.log('Error during executing cmd', e)
    })
  })
})
