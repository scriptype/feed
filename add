#!/usr/bin/env node
require('dotenv').config()
const path = require('path')
const inquirer = require('inquirer')
const links = require('./links')
const { parseTags, scrapePageTitle, isTweet } = require('./src/helpers')
const addLink = require('./src/addLink')
const createJSONBuilder = require('./src/buildJSON')
const git = require('./src/git')
const publish = require('./src/publish')

let linkIsTweet

const questions = [
  {
    type: 'input',
    name: 'url',
    message: 'URL',
    async validate(value) {
      if (!value) {
        return 'Url is required'
      }

      const url = value
      linkIsTweet = isTweet(url)

      const alreadyAdded = links.find(link =>
        link.url === url || (
          link.url.match(/\/$/) && link.url.slice(0, -1) === url
        )
      )
      if (alreadyAdded) {
        return 'This link already exists.'
      }

      return true
    },
    filter: String
  },
  {
    type: 'input',
    name: 'title',
    message: 'Title',
    async default({ url }) {
      try {
        return await scrapePageTitle(url)
      } catch (e) {
        console.log("Couldn't scrape title, enter manually", e)
        return undefined
      }
    },
    validate(value) {
      return !!value || 'Title is required'
    },
    filter: String
  },
  {
    type: 'input',
    name: 'RTQuote',
    message: 'Retweet quote',
    filter: String,
    when: () => linkIsTweet
  },
  {
    type: 'input',
    name: 'tags',
    message: 'Tags (comma separated)',
    filter: String
  },
  {
    type: 'confirm',
    name: 'isConfirmed',
    message: 'Sure?',
    default: true
  },
  {
    type: 'confirm',
    name: 'shouldPublish',
    message: 'Publish now?',
    default: true
  }
]

console.log('Add a new link')

inquirer.prompt(questions).then(async answers => {
  const tags = parseTags(answers.tags)

  const twitterOptions = linkIsTweet ? {
    isTweet: true,
    retweetQuote: answers.RTQuote
  } : {}

  const link = {
    url: answers.url,
    title: answers.title,
    tags,
    datePublished: Date.now(),
    ...twitterOptions
  }

  if (!answers.isConfirmed) {
    return console.log('OK, link is not added.')
  }

  await addLink({
    outputPath: './links.json',
    link
  })

  const JSONBuilder = createJSONBuilder({
    exportDirectory: path.join(__dirname, 'docs', 'data'),
    links: links.concat(link)
  })

  await JSONBuilder.build()
  console.log('Added link:', JSON.stringify(link, null, 2))

  // Commit msg with this mark will trigger gh-action publish workflow
  const messagePrefix = answers.shouldPublish ? '[publish] ' : ''
  await git.commit({
    message: `${messagePrefix}Add: ${link.url}`,
    paths: ['links.json', 'docs']
  })

  if (answers.shouldPublish) {
    await git.push()
  }
})
